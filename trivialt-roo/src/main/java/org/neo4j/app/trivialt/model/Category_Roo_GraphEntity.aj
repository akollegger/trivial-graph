// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.neo4j.app.trivialt.model;

import java.lang.Long;
import java.util.Collection;
import javax.annotation.Resource;
import org.neo4j.app.trivialt.model.Category;
import org.neo4j.graphdb.Node;
import org.neo4j.helpers.collection.IteratorUtil;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.neo4j.annotation.GraphId;
import org.springframework.data.neo4j.repository.DirectGraphRepositoryFactory;
import org.springframework.data.neo4j.repository.GraphRepository;

privileged aspect Category_Roo_GraphEntity {
    
    @GraphId
    private final Long Category.id;
    
    public Category.new(Node n) {
        setPersistentState(n);
    }

    public Long Category.getId() {
        return getNodeId();

    }
    
    public Category Category.save() {
        return (Category)persist();

    }
    
    public void Category.delete() {
        remove();

    }
    
    public static Collection<Category> Category.findPaged(int start, int pageSize) {
        return IteratorUtil.asCollection(CategoryRepositoryHolder.repository().findAll(new PageRequest(start/pageSize,pageSize)));

    }
    
    public static Category Category.findCategory(Long id) {
        return CategoryRepositoryHolder.repository().findOne(id);

    }
    
    public static long Category.count() {
        return CategoryRepositoryHolder.repository().count();

    }
    
    public static Collection<Category> Category.findAll() {
        return IteratorUtil.asCollection(CategoryRepositoryHolder.repository().findAll());

    }
    
    static class org.neo4j.app.trivialt.model.Category.CategoryRepositoryHolder{

                private DirectGraphRepositoryFactory repositoryFactory;

                private static GraphRepository<Category> repository;
        @Resource
        public void setRepositoryFactory(DirectGraphRepositoryFactory repositoryFactory) {
         this.repositoryFactory = repositoryFactory; 

        }
        
        public static GraphRepository<Category> repository() {
        if (CategoryRepositoryHolder.repository==null) { CategoryRepositoryHolder.repository=new CategoryRepositoryHolder().repositoryFactory.createGraphRepository(Category.class);}
return repository;
}} 
declare @type : Category.CategoryRepositoryHolder : @org.springframework.beans.factory.annotation.Configurable;
{{

        }
        
    }
    
}
